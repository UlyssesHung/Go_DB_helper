// NewStructMethodModel is the model for table table_create_demo
type NewStructMethodModel struct {
	[model_str]
}

// [function_name] is a auto generate method for SQL query [query]
func (a *TableCreateDemo) [function_name](tx *sql.Tx) ([]*NewStructMethodModel, error) {
	var insArr []*NewStructMethodModel
	var rows *sql.Rows
	var err error
	if tx != nil {
		rows, err = tx.Query("[query]")
	} else {
		rows, err = db.Query("[query]")
	}
	if err != nil {
		logger.StackLogger(err)
		return nil, err
	}
	if rows != nil {
		defer rows.Close()
		for rows.Next() {
			item := NewStructMethodModel{}
			err := rows.Scan([selectx_rowscan_str])
			if err != nil {
				logger.StackLogger(err)
				return nil, err
			}
			insArr = append(insArr, &item)
		}
		err = rows.Err()
		if err != nil {
			logger.StackLogger(err)
			return nil, err
		}
	}
	return insArr, nil
}

// NewStructMethodModelCollection ...
type NewStructMethodModelCollection []*NewStructMethodModel

// SortBy ...
func (c NewStructMethodModelCollection) SortBy(columnName string, orderstr string) error {
	if orderstr != "asc" && orderstr != "desc" {
		return fmt.Errorf("not supported order keyword: %v", orderstr)
	}
	comparedFunc := func(p1, p2 *NewStructMethodModel) bool {
		[sortby_comparedfunc_str]
		[sortby_comparedfunc_str_default]
	}
	NewStructMethodModelBy(comparedFunc).Sort(c)
	return nil
}

// NewStructMethodModelBy is the type of a "less" function that defines the ordering of its Planet arguments.
type NewStructMethodModelBy func(p1, p2 *NewStructMethodModel) bool

// Sort is a method on the function type, By, that sorts the argument slice according to the function.
func (by NewStructMethodModelBy) Sort(newStructMethodModels []*NewStructMethodModel) {
	ps := &newStructMethodModelSorter{
		newStructMethodModels: newStructMethodModels,
		by:               by, // The Sort method's receiver is the function (closure) that defines the sort order.
	}
	sort.Sort(ps)
}

// newStructMethodModelSorter joins a By function and a slice of Planets to be sorted.
type newStructMethodModelSorter struct {
	newStructMethodModels []*NewStructMethodModel
	by               func(p1, p2 *NewStructMethodModel) bool // Closure used in the Less method.
}

// Len is part of sort.Interface.
func (s *newStructMethodModelSorter) Len() int {
	return len(s.newStructMethodModels)
}

// Swap is part of sort.Interface.
func (s *newStructMethodModelSorter) Swap(i, j int) {
	s.newStructMethodModels[i], s.newStructMethodModels[j] = s.newStructMethodModels[j], s.newStructMethodModels[i]
}

// Less is part of sort.Interface. It is implemented by calling the "by" closure in the sorter.
func (s *newStructMethodModelSorter) Less(i, j int) bool {
	return s.by(s.newStructMethodModels[i], s.newStructMethodModels[j])
}
